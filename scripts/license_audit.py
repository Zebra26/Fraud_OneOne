#!/usr/bin/env python3
from __future__ import annotations

import re
import sys
import json
from pathlib import Path
from importlib.metadata import distributions, PackageNotFoundError


def extract_license(meta: dict[str, str]) -> tuple[str, list[str]]:
    # Prefer explicit License field
    lic = (meta.get("License") or meta.get("license") or "").strip()
    # Collect license classifiers
    classifiers = [c for c in meta.get("Classifier", []) if c.startswith("License ::")]
    return lic, classifiers


def normalize_meta_text(md) -> dict[str, object]:
    # importlib.metadata.Metadata is email.message.Message-like
    # Convert to simple dict with multi-keys expanded
    out: dict[str, object] = {}
    for k in md:
        vals = md.get_all(k)
        if vals is None:
            continue
        if len(vals) == 1:
            out[k] = vals[0]
        else:
            out[k] = list(vals)
    return out


GPL_PAT = re.compile(r"\bAGPL\b|\bGNU\s+Affero\b|\bGPL\b|General Public License", re.I)
LGPL_PAT = re.compile(r"Lesser General Public License", re.I)


def is_blocked(license_name: str, classifiers: list[str]) -> bool:
    """Block AGPL/GPL unless explicitly marked as LGPL. Prefer classifiers over free-text."""
    def flag(s: str) -> bool:
        return bool(GPL_PAT.search(s)) and not bool(LGPL_PAT.search(s))

    # If classifiers are present, trust them first
    if classifiers:
        for c in classifiers:
            if flag(c):
                return True
        # If classifiers indicate OSI-approved non-GPL, do not block even if free-text contains GPL mentions.
        return False

    # Otherwise, check short license identifiers only (avoid scanning long license bodies)
    if license_name and len(license_name) < 64 and flag(license_name):
        return True
    return False


def main() -> int:
    rows = []
    blocked = []
    for dist in sorted(distributions(), key=lambda d: d.metadata.get("Name", "").lower()):
        md = normalize_meta_text(dist.metadata)
        name = str(md.get("Name", ""))
        version = str(md.get("Version", ""))
        home = str(md.get("Home-page", md.get("Home-Page", "")))
        license_name, classifiers = extract_license(md)
        lic_classifiers = "; ".join(classifiers)
        blocked_flag = is_blocked(license_name, classifiers)
        if blocked_flag:
            blocked.append(name or f"<unknown>@{version}")
        rows.append(
            {
                "name": name,
                "version": version,
                "license": license_name or "UNKNOWN",
                "classifiers": classifiers,
                "home": home or "",
                "blocked": blocked_flag,
            }
        )

    # Write LICENSES.md
    out = Path(__file__).resolve().parent.parent / "LICENSES.md"
    with out.open("w", encoding="utf-8") as f:
        f.write("# Third-Party Licenses\n\n")
        f.write("This document lists third-party Python packages detected in the current environment and their licenses. Generated by `scripts/license_audit.py`.\n\n")
        if blocked:
            f.write("WARNING: The following packages appear to be GPL/AGPL-licensed (or include GPL in classifiers) and require legal review before use.\n\n")
            for b in blocked:
                f.write(f"- {b}\n")
            f.write("\n")
        # Table header
        f.write("| Package | Version | License | License Classifiers | Home |\n")
        f.write("|---|---|---|---|---|\n")
        for r in rows:
            f.write(
                "| {name} | {version} | {license} | {classifiers} | {home} |\n".format(
                    name=r["name"],
                    version=r["version"],
                    license=(r["license"] or "UNKNOWN").replace("|", "/"),
                    classifiers=("; ".join(r["classifiers"]) if r["classifiers"] else "").replace("|", "/"),
                    home=(r["home"] or "").replace("|", "/"),
                )
            )

    # Also write machine-readable JSON
    out_json = Path(__file__).resolve().parent.parent / "third_party_licenses.json"
    out_json.write_text(json.dumps(rows, indent=2), encoding="utf-8")

    print(f"Wrote {out}")
    print(f"Wrote {out_json}")
    if blocked:
        print("BLOCKED: Potential GPL/AGPL detected:")
        for b in blocked:
            print(f" - {b}")
        # Non-zero exit to highlight issue in CI, but do not crash local dev unless desired.
        return 1
    return 0


if __name__ == "__main__":
    sys.exit(main())
