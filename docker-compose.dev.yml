services:
  backend:
    image: fraud-backend:dev
    build:
      context: ./backend
    env_file:
      - .env
    environment:
      - APP_ENV=development
      - REDIS_CLUSTER_NODES=redis-cluster:7000,redis-cluster:7001,redis-cluster:7002
      - FEATURE_STORE_URI=redis+cluster://redis-cluster:7000
      - REDIS_USE_SSL=false
      - ENABLE_TLS=false
    volumes:
      - models_data:/app/models
      - ./backend/tls:/app/tls:ro
      - ./security/certs:/app/security/certs:ro
    ports:
      - "8000:8000"
      - "8443:8443"
    labels:
      service: backend
    depends_on:
      - kafka
      - mongo
      - redis-cluster

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    environment:
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka:29093
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,EXTERNAL://0.0.0.0:9094,CONTROLLER://0.0.0.0:29093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,EXTERNAL://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,EXTERNAL:PLAINTEXT,CONTROLLER:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CLUSTER_ID: Nji2JY9pRdy2JqkLx8aYaw
      KAFKA_LOG_DIRS: /tmp/kraft-combined-logs
    ports:
      - "9094:9092"
    hostname: kafka

  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db

  redis-cluster:
    image: grokzen/redis-cluster:latest
    ports:
      - "7000-7005:7000-7005"

  redisinsight:
    image: redislabs/redisinsight:latest
    depends_on:
      - redis-cluster
    ports:
      - "8001:5540"
    environment:
      - REDISINSIGHT_ACCEPT_LICENSE=yes

  ml-inference:
    image: fraud-ml-inference:dev
    build:
      context: ./services/ml-inference
    env_file:
      - .env
    environment:
      - APP_ENV=development
      - REDIS_CLUSTER_NODES=redis-cluster:7000,redis-cluster:7001,redis-cluster:7002
      - FEATURE_STORE_URI=redis+cluster://redis-cluster:7000
      - REDIS_USE_SSL=false
      - ENABLE_JWT_AUTH=true
      - ENABLE_HMAC_SIGNING=true
    depends_on:
      - kafka
      - redis-cluster
      - mongo
    volumes:
      - models_data:/app/models
      - ./backend/tls:/app/tls:ro
      - ./security/certs:/app/security/certs:ro
    labels:
      service: ml-inference

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    depends_on:
      - kafka
    ports:
      - "8080:8080"
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
      - KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL=PLAINTEXT

  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
    depends_on:
      - backend
      - ml-inference

  grafana:
    image: grafana/grafana:10.4.3
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus

  feature-engineering:
    build:
      context: ./services/spark
    depends_on:
      - kafka
    volumes:
      - spark-checkpoints:/opt/checkpoints

  trainer:
    image: fraud-trainer:dev
    build:
      context: ./services/trainer
      dockerfile: Dockerfile
    env_file:
      - .env
    environment:
      MODEL_DIR: /workspace/models
      MODEL_PATH: /workspace/models/ensemble_detector.joblib
      OPTIMAL_THRESHOLD_PATH: /workspace/models/optimal_threshold.txt
      MLFLOW_TRACKING_URI: file:/workspace/mlruns
      MLFLOW_EXPERIMENT_NAME: fraud-detection
      APP_ENV: development
      REDIS_CLUSTER_NODES: redis-cluster:7000,redis-cluster:7001,redis-cluster:7002
      FEATURE_STORE_URI: redis+cluster://redis-cluster:7000
      REDIS_USE_SSL: "false"
    volumes:
      - models_data:/workspace/models
      - ./mlruns:/workspace/mlruns
    depends_on:
      - mongo
      - redis-cluster
      - kafka
    command: ["python", "train_pipeline.py"]

  deferred-worker:
    build:
      context: .
      dockerfile: services/deferred-worker/Dockerfile
    env_file:
      - .env
    environment:
      KAFKA_BROKERS: kafka:9092
      DEFERRED_TOPIC: ${DEFERRED_TOPIC:-predictions.deferred}
      KAFKA_TOPIC_PREDICTIONS: ${KAFKA_TOPIC_PREDICTIONS:-predictions}
      INFERENCE_URL: http://ml-inference:8080
      OFFLINE_WRITE: "true"
      MONGO_URI: mongodb://mongo:27017/fraud_db
      MONGO_DB: fraud_db
      REDIS_CLUSTER_NODES: redis-cluster:7000,redis-cluster:7001,redis-cluster:7002
      REDIS_USE_SSL: "false"
    depends_on:
      - kafka
      - ml-inference

  mlflow:
    image: ghcr.io/mlflow/mlflow:${MLFLOW_TAG:-latest}
    ports:
      - "5000:5000"
    command:
      - mlflow
      - ui
      - --host
      - 0.0.0.0
      - --port
      - "5000"
      - --backend-store-uri
      - sqlite:///mlruns/mlflow.db
      - --default-artifact-root
      - file:/mlruns
    volumes:
      - ./mlruns:/mlruns

volumes:
  mongo_data:
  spark-checkpoints:
  models_data:
  grafana_data:
