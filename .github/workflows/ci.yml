name: CI

on:
  workflow_dispatch:
  push:
    branches: [ main ]
  pull_request:

jobs:
  setup-and-test:
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create venv (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          python -m venv .venv
          .\.venv\Scripts\Activate.ps1
          scripts\setup_env.ps1

      - name: Create venv (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          python -m venv .venv
          source .venv/bin/activate
          bash scripts/setup_env.sh

      - name: Backend unit tests
        shell: bash
        run: |
          source .venv/bin/activate || . .venv/Scripts/Activate.ps1
          pytest backend/tests -q || true

  license-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Create venv and install deps (Linux)
        shell: bash
        run: |
          python -m venv .venv
          source .venv/bin/activate
          bash scripts/setup_env.sh

      - name: Run license audit (fail on GPL/AGPL)
        shell: bash
        run: |
          source .venv/bin/activate
          python scripts/license_audit.py

      - name: Upload license artifacts
        uses: actions/upload-artifact@v4
        with:
          name: license-audit
          path: |
            LICENSES.md
            third_party_licenses.json
